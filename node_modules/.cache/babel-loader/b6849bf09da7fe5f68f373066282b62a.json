{"ast":null,"code":"const numToText = to_vietnamese => {\n  const defaultNumbers = ' hai ba bốn năm sáu bảy tám chín';\n  const chuHangDonVi = ('1 một' + defaultNumbers).split(' ');\n  const chuHangChuc = ('lẻ mười' + defaultNumbers).split(' ');\n  const chuHangTram = ('không một' + defaultNumbers).split(' ');\n  function convert_block_three(number) {\n    if (number == '000') return '';\n    var _a = number + ''; //Convert biến 'number' thành kiểu string\n\n    //Kiểm tra độ dài của khối\n    switch (_a.length) {\n      case 0:\n        return '';\n      case 1:\n        return chuHangDonVi[_a];\n      case 2:\n        return convert_block_two(_a);\n      case 3:\n        var chuc_dv = '';\n        if (_a.slice(1, 3) != '00') {\n          chuc_dv = convert_block_two(_a.slice(1, 3));\n        }\n        var tram = chuHangTram[_a[0]] + ' trăm';\n        return tram + ' ' + chuc_dv;\n    }\n  }\n  function convert_block_two(number) {\n    var dv = chuHangDonVi[number[1]];\n    var chuc = chuHangChuc[number[0]];\n    var append = '';\n\n    // Nếu chữ số hàng đơn vị là 5\n    if (number[0] > 0 && number[1] == 5) {\n      dv = 'lăm';\n    }\n\n    // Nếu số hàng chục lớn hơn 1\n    if (number[0] > 1) {\n      append = ' mươi';\n      if (number[1] == 1) {\n        dv = ' mốt';\n      }\n    }\n    return chuc + '' + append + ' ' + dv;\n  }\n  const dvBlock = '1 nghìn triệu tỷ'.split(' ');\n  function to_vietnamese(number) {\n    var str = parseInt(number) + '';\n    var i = 0;\n    var arr = [];\n    var index = str.length;\n    var result = [];\n    var rsString = '';\n    if (index == 0 || str == 'NaN') {\n      return '';\n    }\n\n    // Chia chuỗi số thành một mảng từng khối có 3 chữ số\n    while (index >= 0) {\n      arr.push(str.substring(index, Math.max(index - 3, 0)));\n      index -= 3;\n    }\n\n    // Lặp từng khối trong mảng trên và convert từng khối đấy ra chữ Việt Nam\n    for (i = arr.length - 1; i >= 0; i--) {\n      if (arr[i] != '' && arr[i] != '000') {\n        result.push(convert_block_three(arr[i]));\n\n        // Thêm đuôi của mỗi khối\n        if (dvBlock[i]) {\n          result.push(dvBlock[i]);\n        }\n      }\n    }\n\n    // Join mảng kết quả lại thành chuỗi string\n    rsString = result.join(' ');\n\n    // Trả về kết quả kèm xóa những ký tự thừa\n    return rsString.replace(/[0-9]/g, '').replace(/ /g, ' ').replace(/ $/, '');\n    return to_vietnamese(number);\n  }\n};\nexport default numToText;","map":{"version":3,"names":["numToText","to_vietnamese","defaultNumbers","chuHangDonVi","split","chuHangChuc","chuHangTram","convert_block_three","number","_a","length","convert_block_two","chuc_dv","slice","tram","dv","chuc","append","dvBlock","str","parseInt","i","arr","index","result","rsString","push","substring","Math","max","join","replace"],"sources":["D:/JOB CODE/autobank/789BET/vietin/autobank/src/constant/numtotext.js"],"sourcesContent":["const numToText = (to_vietnamese) => {\r\n    const defaultNumbers =' hai ba bốn năm sáu bảy tám chín';\r\n\r\n    const chuHangDonVi = ('1 một' + defaultNumbers).split(' ');\r\n    const chuHangChuc = ('lẻ mười' + defaultNumbers).split(' ');\r\n    const chuHangTram = ('không một' + defaultNumbers).split(' ');\r\n    \r\n    function convert_block_three(number) {\r\n      if(number == '000') return '';\r\n      var _a = number + ''; //Convert biến 'number' thành kiểu string\r\n    \r\n      //Kiểm tra độ dài của khối\r\n      switch (_a.length) {\r\n        case 0: return '';\r\n        case 1: return chuHangDonVi[_a];\r\n        case 2: return convert_block_two(_a);\r\n        case 3: \r\n          var chuc_dv = '';\r\n          if (_a.slice(1,3) != '00') {\r\n            chuc_dv = convert_block_two(_a.slice(1,3));\r\n          }\r\n          var tram = chuHangTram[_a[0]] + ' trăm';\r\n          return tram + ' ' + chuc_dv;\r\n      }\r\n    }\r\n    \r\n    function convert_block_two(number) {\r\n      var dv = chuHangDonVi[number[1]];\r\n      var chuc = chuHangChuc[number[0]];\r\n      var append = '';\r\n    \r\n      // Nếu chữ số hàng đơn vị là 5\r\n      if (number[0] > 0 && number[1] == 5) {\r\n        dv = 'lăm'\r\n      }\r\n    \r\n      // Nếu số hàng chục lớn hơn 1\r\n      if (number[0] > 1) {\r\n        append = ' mươi';\r\n        \r\n        if (number[1] == 1) {\r\n          dv = ' mốt';\r\n        }\r\n      }\r\n    \r\n      return chuc + '' + append + ' ' + dv; \r\n    }\r\n\r\n\r\n    const dvBlock = '1 nghìn triệu tỷ'.split(' ');\r\n\r\n    function to_vietnamese(number) {\r\n        var str = parseInt(number) + '';\r\n        var i = 0;\r\n        var arr = [];\r\n        var index = str.length;\r\n        var result = [];\r\n        var rsString = '';\r\n\r\n        if (index == 0 || str == 'NaN') {\r\n            return '';\r\n        }\r\n\r\n        // Chia chuỗi số thành một mảng từng khối có 3 chữ số\r\n        while (index >= 0) {\r\n            arr.push(str.substring(index, Math.max(index - 3, 0)));\r\n            index -= 3;\r\n        }\r\n\r\n        // Lặp từng khối trong mảng trên và convert từng khối đấy ra chữ Việt Nam\r\n        for (i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i] != '' && arr[i] != '000') {\r\n            result.push(convert_block_three(arr[i]));\r\n\r\n            // Thêm đuôi của mỗi khối\r\n            if (dvBlock[i]) {\r\n                result.push(dvBlock[i]);\r\n            }\r\n            }\r\n        }\r\n\r\n        // Join mảng kết quả lại thành chuỗi string\r\n        rsString = result.join(' ');\r\n\r\n        // Trả về kết quả kèm xóa những ký tự thừa\r\n        return rsString.replace(/[0-9]/g, '').replace(/ /g,' ').replace(/ $/,'');\r\n        return to_vietnamese(number);\r\n    }\r\n}\r\n\r\nexport default numToText;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}